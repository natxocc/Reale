const DataTable={mixins:[mixins],template:'\n    <div style="text-align: left">\n      <ag-grid-vue\n        :animateRows="true"\n        :columnDefs="columnDefs"\n        :columnTypes="columnTypes"\n        :defaultColDef="defaultColDef"\n        :detailCellRendererParams="detailCellRendererParams"\n        :enableCellChangeFlash="true"\n        :enableRangeSelection="true"\n        :floatingFilter="false"\n        :localeText="localeText"\n        :masterDetail="masterDetail"\n        :rowClassRules="rowClassRules"\n        :rowData="rowData"\n        :sideBar="sideBar"\n        :sizeColsToFix="true"\n        :statusBar="statusBar"\n        :suppressColumnVirtualisation="true"\n        :suppressDragLeaveHidesColumns="true"\n        :suppressMakeColumnVisibleAfterUnGroup="true"\n        :suppressSizeToFit="true"\n        @cell-clicked="onCellClicked"\n        @cell-value-changed="onCellValueChanged"\n        @filter-changed="onFilterChanged"\n        @grid-ready="onGridReady"\n        @row-data-changed="onRowDataChanged"\n        @selection-changed="onSelectionChanged"\n        class="ag-theme-balham"\n        multiSortKey="ctrl"\n        rowGroupPanelShow="always"\n        style="height: 500px;"\n      ></ag-grid-vue>\n    </div>\n  ',name:"DataTable",props:{columnDefs:null,columnDefsSub:null,rowData:null,masterDetail:null,rowClassRules:null,filters:null,quickFilter:null},data:()=>({gridApi:null,columnApi:null,detailCellRendererParams:null,rowSelection:null,defaultColDef:{enablePivot:!1,editable:!1,resizable:!0,filter:!0,sortable:!0},columnTypes:{date:{filter:"agSetColumnFilter"},datetime:{filter:"agSetColumnFilter"},text:{filter:"agSetColumnFilter"},number:{filter:"agNumberColumnFilter",enableValue:!0,enableRowGroup:!0},general:{filter:"agSetColumnFilter",enableRowGroup:!0},bit:{filter:"agSetColumnFilter",enableRowGroup:!0,cellRenderer:function(params){return`<input type='checkbox' onclick="return false;" ${params.value?"checked":""} />`}}},statusBar:{statusPanels:[{statusPanel:"agTotalRowCountComponent",align:"left"},{statusPanel:"agFilteredRowCountComponent"},{statusPanel:"agSelectedRowCountComponent"},{statusPanel:"agAggregationComponent"}]},sideBar:{toolPanels:[{id:"columns",labelDefault:"Columns",labelKey:"columns",iconKey:"columns",toolPanel:"agColumnsToolPanel"}],defaultToolPanel:"",enablePivot:!1},localeText:null}),components:{"ag-grid-vue":AgGridVue.AgGridVue},methods:{onGridReady(params){params.api&&params.columnApi&&(this.gridApi=params.api,this.columnApi=params.columnApi,this.gridApi.sizeColumnsToFit())},onRowDataChanged(params){params.api&&params.columnApi&&(this.gridApi=params.api,this.columnApi=params.columnApi,this.gridApi.sizeColumnsToFit(),this.createSubtable(),this.autoFilter())},autoSizeColumns(){var allColumnIds=[];this.columnApi&&(this.columnApi.getAllColumns().forEach(function(column){allColumnIds.push(column.colId)}),this.columnApi.autoSizeColumns(allColumnIds))},autoFilter(){this.gridApi&&(this.gridApi.setFilterModel(this.filters),this.onFilterChanged())},onFilterChanged(event){this.gridApi&&this.$emit("gridData",this.gridApi.rowModel.rootNode.childrenAfterFilter)},onCellClicked(event){this.$emit("cellClicked",event)},onSelectionChanged(params){let row=[];row=this.gridApi.getSelectedRows(),this.$emit("rowSelected",row[0])},onCellValueChanged(value){},createSubtable(){let self=this;var subGrid;this.detailCellRendererParams={detailGridOptions:{enableRangeSelection:!0,columnDefs:this.columnDefsSub,defaultColDef:this.defaultColDef,columnTypes:this.columnTypes,localeText:localeText,onGridReady(params){this.gridApi=params.api},onFirstDataRendered(params){params.api.sizeColumnsToFit()},onCellValueChanged(value){},onSelectionChanged(event){let row={};row=this.gridApi.getSelectedRows(),self.$emit("rowSelectedSub",row[0])}},getDetailRowData:params=>{params.successCallback(params.data.callRecords)},template:function(params){return'<div style="height: 100%; background-color: #EDF6FF; padding: 20px; box-sizing: border-box;">  <div ref="eDetailGrid" style="height: 90%;"></div></div>'}}}},beforeMount(){this.localeText=this.lang.table},created(){},watch:{quickFilter:function(){this.gridApi.setQuickFilter(this.quickFilter)},filters:{handler(val){this.autoFilter()},deep:!0}}},NDialog={template:'\n    <div>\n      <q-dialog\n        :maximized="true"\n        transition-hide="slide-down"\n        transition-show="slide-up"\n        v-model="model"\n      >\n        <q-card>\n          \x3c!-- TOOLBAR --\x3e\n          <q-toolbar class="bg-primary text-white">\n            <q-btn @click="onSave" class="text-white" dense flat icon="save"\n              >{{$q.lang.Guardar}}</q-btn\n            >\n            <q-space />\n            <q-btn\n              @click="readonly=true;$emit(\'cancel\', true)"\n              class="text-white"\n              dense\n              flat\n              icon="close"\n            ></q-btn>\n          </q-toolbar>\n          <q-separator />\n          \x3c!-- INICIO DE DATOS --\x3e\n          <q-card-section>\n            <div class="row">\n              <div\n                :key="key"\n                class="col-xs-12 col-sm-6 col-md-4 col-lg-3"\n                v-bind="fields[key].props"\n                v-for="(value,key, index) in data"\n              >\n                <q-card-section>\n                  \x3c!-- ES TEXTO --\x3e\n                  <q-input\n                    :label="fields[key].name"\n                    @input="onChange(data[key], key)"\n                    dense\n                    stack-label\n                    type="text"\n                    v-bind="fields[key].props"\n                    v-if="fields[key].type ==\'text\'"\n                    v-model="data[key]"\n                  ></q-input>\n                  \x3c!-- ES SELECT --\x3e\n                  <q-select\n                    :label="fields[key].name"\n                    :options="options[key].options"\n                    :options-dense="true"\n                    @filter="filterFn"\n                    @input="onChange(data[key], key)"\n                    dense\n                    stack-label\n                    type="text"\n                    v-bind="fields[key].props"\n                    v-if="fields[key].type ==\'select\' && options"\n                    v-model="data[key]"\n                  />\n                  \x3c!-- ES AUTOCOMPLETE --\x3e\n                  <q-select\n                    :label="fields[key].name"\n                    :options="options[key].options"\n                    :options-dense="true"\n                    @filter="filterFn"\n                    @input="onChange(data[key], key)"\n                    @keyup.native="selected=key"\n                    @new-value="createValue"\n                    dense\n                    hide-selected\n                    input-debounce="0"\n                    stack-label\n                    type="text"\n                    use-input\n                    v-bind="fields[key].props"\n                    v-if="fields[key].type ==\'autocomplete\' && options"\n                    v-model="data[key]"\n                  />\n                  \x3c!-- ES NUMERO --\x3e\n                  <q-input\n                    :label="fields[key].name"\n                    @input="onChange(data[key], key)"\n                    dense\n                    stack-label\n                    type="number"\n                    v-bind="fields[key].props"\n                    v-if="fields[key].type ==\'number\'"\n                    v-model="data[key]"\n                  ></q-input>\n                  \x3c!-- ES BIT --\x3e\n                  <q-toggle\n                    :label="fields[key].name"\n                    dense\n                    v-bind="fields[key].props"\n                    v-if="fields[key].type ==\'bit\'"\n                    v-model="data[key]"\n                  />\n                  \x3c!-- ES FECHA --\x3e\n                  <q-input\n                    :label="fields[key].name"\n                    @input="onChange(data[key], key)"\n                    dense\n                    mask="date"\n                    v-bind="fields[key].props"\n                    v-if="fields[key].type.includes(\'date\')"\n                    v-model="data[key]"\n                  >\n                    <q-icon class="cursor-pointer" name="event" slot="append">\n                      <q-popup-proxy>\n                        <q-date\n                          @input="onChange(data[key], key)"\n                          minimal\n                          todayBtn\n                          v-model="data[key]"\n                        />\n                      </q-popup-proxy>\n                    </q-icon>\n                  </q-input>\n                </q-card-section>\n              </div>\n            </div>\n          </q-card-section>\n        </q-card>\n      </q-dialog>\n    </div>\n  ',mixins:[mixins],name:"NDialog",props:{model:null,data:null,fields:null},data:()=>({selected:!1,options:null}),computed:{},methods:{onSave:function(){this.$emit("onSave",!0)},onCancel:function(){this.$emit("onCancel",!0),this.model=!1},onChange:function(value,key){this.data[key].value&&(this.data[key]=this.data[key].value),this.$emit("onChange",this.data[key],key)},createValue(val,done){done(val)},selectKey(key){this.selected=key},filterFn(val,update,abort){if(!this.selected)return void update(()=>{});if("select"==this.fields[key].type)return void update(()=>{});let fields=this.fields[this.selected].options;update(""===val?()=>{this.options[this.selected].options=fields}:()=>{const value=val.toLowerCase();fields[0].label?(fields=fields.map(x=>x.label),this.options[this.selected].options=fields.filter(v=>v.toString().toLowerCase().indexOf(value)>-1)):this.options[this.selected].options=fields.filter(v=>v.toString().toLowerCase().indexOf(value)>-1)})}},beforeMount(){},watch:{model:function(params){this.options=JSON.parse(JSON.stringify(this.fields)),this.model||(this.options=null)}}};